# Reference - https://aws.amazon.com/blogs/infrastructure-and-automation/best-practices-for-deploying-ec2-instances-with-aws-cloudformation/
---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Sample VPC'

Parameters:

  SubnetBlock:
    Type: String
    Default: SUBNET_VALUE
    Description: CidrBlock for subnet 04 within the VPC


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - SubnetBlock

Resources:

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: source
        Value: gopaddle

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: VPC_ID
      

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: VPC_ID
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public
      - Key: source
        Value: gopaddle


  Route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    

  Subnet:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: SUBNET_ZONE
      CidrBlock:
        Ref: SubnetBlock
      VpcId: VPC_ID
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet04"
      - Key: SUBNET_TAG
        Value: 1
      - Key: source
        Value: gopaddle

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Host Security Group
      VpcId: VPC_ID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      Tags:
      - Key: source
        Value: gopaddle
       
  SecurityGroupIngress22:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: SecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      CidrIp: 0.0.0.0/0
      FromPort: 22
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      ToPort: 22
      
  SecurityGroupIngress443:
    Type: "AWS::EC2::SecurityGroupIngress"
    DependsOn: SecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      CidrIp: 0.0.0.0/0
      FromPort: 443
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      ToPort: 443

  Ec2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: IMAGE_ID
      KeyName: KEY_NAME
      InstanceType: "t2.micro"
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        GroupSet: 
          - Ref: SecurityGroup
        SubnetId: 
          Ref: Subnet
      Tags:
      - Key: source
        Value: gopaddle
      UserData: !Base64
        "Fn::Sub": |
          #!/bin/bash
          sudo apt update
          sudo snap install amazon-ssm-agent --classic 
          sudo snap switch --channel=candidate amazon-ssm-agent 
          sudo snap refresh amazon-ssm-agent
          sudo snap start amazon-ssm-agent 
          sudo snap services amazon-ssm-agent 
  
Outputs:

  SubnetID:
    Description: The Subnet Id
    Value: !Ref Subnet
  
  InstanceID:
    Description: The Instance Id
    Value: !Ref Ec2Instance
    
  SecurityGroupID:
    Description: The Security Group Id
    Value: !Ref SecurityGroup

  PublicIp: 
    Value: !GetAtt 
          - Ec2Instance
          - PublicIp
    Description: Ec2Instance's PublicIp Address
